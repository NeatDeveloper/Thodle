/// Модель **Группа**
///
/// Модель, описывающая группу
///
/// @namespace University
/// @erd University
model Group {
    /// Уникальный идентификатор группы в университете
    id String @id @default(cuid())

    /// Название группы
    name String @unique

    /// Название группы, короткий вариант
    shortName String @unique @map("short_name")

    /// Ссылка на куратора
    curator    String?

    /// Ссылка на факультет
    faculity   Int

    /// Ссылка на тьютора
    tutor      String?

    /// Год образования
    year      Int

    groupHeads GroupHead[]
    students   Student[]
    subGroups SubGroup[]

    Curator  Curator? @relation(fields: [curator], references: [id])
    Faculity Faculity @relation(fields: [faculity], references: [id])
    Tutor    Tutor?   @relation(fields: [tutor], references: [id])

    /// Дата обновления группы в нашей системе
    updatedAt DateTime @updatedAt @map("updated_at")

    /// Дата создания группы в нашей системе
    createdAt DateTime @default(now()) @map("created_at")

    @@index([faculity])
    @@index([curator])
    @@index([tutor])
    @@map("Groups")
    @@schema("university")
}

/// Модель **Подгруппа**
///
/// Модель, описывающая подгруппу
///
/// @namespace University
/// @erd University
model SubGroup {
    /// Уникальный идентификатор подгруппы
    id   Int    @id @default(autoincrement())

    /// Название подгруппы
    name String

    /// Уникальный идентификатор группы
    groupID String @map("group_id")

    /// Порядок подгруппы(Первая, вторая)
    order SubGroupOrder

    students Student[]

    Group    Group     @relation(fields: [groupID], references: [id])

    @@index([groupID])
    @@map("SubGroups")
    @@schema("university")
}

enum SubGroupOrder {
    FIRST  @map("subgroup_order_first")
    SECOND @map("subgroup_order_second")

    @@map("SubGroupOrders")
    @@schema("university")
}
